---
layout: post
title:  "Alibaba's Audition"
date:   2019-03-26 10:34:10 +0800
---

<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script>

---

# 03-26-Review

> 持续时间：~30'

先问了计算机专业学习的课程情况，问是不是学完了，我说基本学完，还有人工智能数据挖掘这些没学。

然后问了两个项目。

关于WebGL的游戏，先问了我负责什么，我说交互界面，比如道具装备和状态栏；

他问怎么实现，我说用正方形加纹理贴图；问怎么知道每个道具的位置（突然细节），我说通过方格大小和道具的顺序来计算出像素的位置，这里因为我表达得不够清楚，还纠结了好一会；

他问画图是不是用canvas还是其他，我说是WebGL，因为课程要求就是WebGL；他问有没有了解其他画图的方法（按我的理解就是类似canvas这些吧），我哪有了解……难受（对于我这种菜鸡来说，这些个面试简直就是变相被羞辱的过程QAQ）；

然后就问了做项目过程中最大的挑战和收获，我先说了把剧情和对白按照约定的格式写到json文件里面，就可以方便地添加到游戏内容里面而不用补充多少代码，不过面试官听到是队友做的，要说我自己做的。我懵了，没想到有什么挑战和收获（明明当时觉得很充实很有成就感学到了不少东西的啊……难道说，当时所做的，也都是些搬砖的东西吗……想想还真有可能是），我就说了学会怎么封装，他让我举具体例子，但是我也死活憋不出具体的东西（啊啊啊啊啊啊啊啊wysl），封装不就是各种各样的封装吗！按我的理解这可以用到所有东西上啊qaq，最后说了关于绑定纹理的封装，只需要给出图片的路径blablabla……难受；

然后面试官可能发现不对劲了吧，问我比较熟悉的语言是什么，我说C++。他问我有什么C++的项目，我说了那个OpenGL游戏。

他问我负责什么，我说编代码<(￣ ﹌ ￣)>；问最大的收获或挑战（again！），我说一是图形学视觉效果的实现，二是游戏系统的编写；他问游戏系统编写具体的，我说随着游戏内容增加，需要重新整理代码，他问怎么整理（我也不知道怎么整理的咋办！！难受……），我说比如抽象出一些类，然后通过接口（当时没说出来）管理，比较方便。问我例子，我说了Player类，记录玩家数据和管理操作，他问我加这个类之前那些数据怎么存，我说放在Game里面，加上Player之后，就放在Player里面，然后Player作为Game的成员。

他问面向对象语言除了封装之外有什么特性。这明明是很基础的问题，但我就感觉是一脸懵逼。看来我根本没学过C++。我说不清楚，他说不是上过C++嘛，老师没说这些吗？（啊啊啊啊）其实我真的想说当时老师讲得太差劲了根本听不进去。

然后他问我指针是什么（已经开始怀疑我不会编程了吗），我说指向内存数据的地址；然后问怎么表示，我说类型名前加星号（擦汗.jpg）（等等我真的是说在类型名**前面**吗，好吧不要在意这些细节）；然后问对指针可以加减乘除吗，我说加减可以，乘除没意义；问加减有什么用，我说用在连续内存比如数组（的索引）；他问如果五个数据的数组，但是指针加了10，用这个指针的时候会发生什么，我……会报错吗？问什么类型的错误？我说可能会越界？问一定会越界吗还是可能会？我说可能是可能吧（然而我不知道其他的可能是什么，我感觉如果那个地方有合法内存可能不会报错？我也不知道，但是我说不清楚），然后他问什么情况不会报错，我说不出来，然后改口说一定会报错（……………………）；他问是编译器报错还是运行时报错还是操作系统报错，我……放弃挣扎了，不清楚。

那这次面试就到这里吧，谢谢（参与）。

对了过程中还让我打开一个在线IDE，不过好像没有用到，应该是我已经菜到不需要编代码了吧。

**我到底会些什么？**

* 面向对象语言的特性：
    
    1. 封装
    2. 继承
    3. 多态

* 数组越界

    编译器不报错，运行时报错；不一定会报错（？）

---

# Prepare

* 线程和进程

* TCP/IP

* 数据库

* multimap，<set>，最小生成树，burst balloons动态规划

---

# 04-01-Review

> 持续时间：39'37"

### **自我介绍**

我没说竺院，不过感觉对简历里写的竺院这个东西很感兴趣，我给竺院丢面子了。问了一下本科毕业的打算，我说有好实习或者工作可能倾向工作；问了一下有没有学过Java，没有；如果实习的话，暑期前有没有时间自学Java，有；简历上两个项目和图形学和游戏都有关，对以后工作方向有没有什么想法，我说这只是巧合，没有特别的想法。

### **算法** 

最喜欢的数据结构，为什么？我说了堆，因为通过旋转变换维护性质，比较巧妙等……然后说到了最小堆，常见用途说了用于实时地维护顺序。

问了如何表示堆（数组）、建堆（从第一个非叶节点开始percolate down），维护堆的时间复杂度（log(N)）这些基础知识。

* 一个问题：一个很大的链表，只可以遍历一次，要随机从中选出k个数？

    （本来就不擅长这些，面试过程更是紧张得根本想不出，然后查了一下题目）先说了选出前面k个，然后后面的数每个按照一定的概率替换掉前面的某个数；

    面试官提示说可以用产生随机数的函数帮助你；我没有get到；然后提示了用排序，随机给数下标，然后给它们下标排序，取出前k个；但是我当时没有想到怎么用在链表里，最后面试官告诉我可以在遍历的过程中维护一个k堆，然后随机给每个数一个下标，每遍历一个数，按照下标加入堆中进行排序。

### **基础知识**

然后问操作系统、计算机网络和编译原理哪个学得好，我选了操作系统（没复习，难受）。

进程和线程的区别？我答进程不共享内存空间，线程共享；然后问进程不共享内存空间如何进行互相之间的信息传递，即进程间传递信息的方式有哪些？我记得是学过的但是忘了！然后问进程执行需要申请哪些内存空间？我说了堆和栈就不记得了……

[Tencent's Audition]({{ site.baseurl }}{% post_url /Diary/2019-03-22-Tencent %})

---

# 04-04-Review

> 持续时间：21'15"

### **自我介绍**

还是不知道说啥……还说给我3分钟，我觉得10秒就够了。见我说不下去了说学得好的计算机课是啥，我说数据结构和操作系统（这几天就只看了这些emmm……）然后就开始问我数据结构的问题了。

### **数据结构**

* 数组和链表的区别，分别常用于什么情况？

我说数组大小需要一开始就知道，然后大小增添不灵活，链表的话可以在使用过程随意增添删除，但是数组索引的话，随机查找可以通过下标直接索引，链表的话就可能需要遍历一遍；数组适合形式比较固定的（有规律的）情况，链表的话适合需要动态增加删除的情况。

> [数组与链表的特点以及区别][https://blog.csdn.net/qq_36561650/article/details/81069194]

* 项目中什么地方用到了数组和链表？

我说存储物体的点的坐标用到了数组；把物体的各部分（比如人物的头、手臂、四肢等部分）连接起来用到了链表（~~反正吹牛不用打草稿~~）

* 常见排序算法和复杂度

快速排序、归并排序$$O(n\log{n})$$，选择排序、冒泡排序$$O(n^2)$$，妈耶想不到了，然后说了基数排序，但是好像是外部排序（*注：不是外部排序*），而且一时想不出时间复杂度（其实就是位数？）（*注：是$$O(n \log{_rm}$$*)

* 快速排序的实现？

这里我说的比较具体，说了选三个数中间大小的一个作为pivot，放到最后，然后两个指针从两端开始往中间查找，比较两个数和pivot的大小关系，然后满足一定关系的话就交换这两个数，直到两个指针相遇；以此为一次迭代（*好像应该是递归吧*），然后通过迭代把整个数组排好序。面试官问快速排序用到了什么算法思想，我犹豫了一会说是分治吧，他说在我的描述中听不出分治的思想，然后我想了一下的确，所以换了一种描述，首先选出一个数，把剩余的数分成两组，分别是比他大的和比他小的，然后对这两组分别再进行相同方式的排序（这样听起来才像是分治啊）。

* 排序算法的稳定性的理解？

我说的是如果数据本身有一定规律而且和排序算法不是很适合的话，可能造成排序的时间复杂度明显变大，就说排序算法的稳定性不是很好。（ah-oh完全错误……正确答案见下）

> 原本键值一样的元素排序之后相对位置不变。比如在原序列中，$$r[i]=r[j]$$，且$$r[i]$$在$$r[j]$$之前，而在排序后的序列中，$$r[i]$$仍在$$r[j]$$之前，则称这种排序算法是稳定的；否则称为不稳定的。冒泡排序、归并排序、基数排序是稳定的，快速排序是不稳定的。对于复杂的类型，交换的话可能使原本不应该交换的元素交换了，比如“学生”数组按照“年龄”排序，除了“年龄”还有很多别的属性，稳定的排序可以使得年龄相同的学生一定不交换。

* 哈希表的查找、冲突的处理？

查找$$O(1)$$，冲突的话可以用链表，或者线性probing（*探测/探查*）、k平方的probing、或者二次hash求值。

* 树的平衡性？

保持树的平衡使查找等操作复杂度不至于增大。常见平衡树？红黑树，AVL树，B+树……AVL树的实现？先插入，然后查找违反规则的节点，然后进行旋转。

### **操作系统**

* 进程和线程的区别？（**必问**）

基本单元、是否共享内存空间；[进程和线程]({{ site.baseurl }}{% post_url /Operating System/2019-03-19-Operating-System[1] %})

* 进程之间通信的方式

共享内存、消息队列、管道、信号量；

* 进程调度的算法

First Come First Served、shortest……最短执行时间的先执行（忘了叫什么！shit……）（*Shortest Job First*）、Round-robin（*还有Shortest Remain Time First、Priority*）

* 除了windows用过什么操作系统？什么发行版本？

上课要用Linux；发行版本我说了Ubuntu（不过应该是指Linux版本叭……反正这个我也忘了）

* Linux常用命令？

我说了ps，ls，cd（-_-）。如果要查看CPU利用率，用什么命令？崩了。鬼知道……（*命令：top/vmstat/sar*）

* 用户态和内核态的区别，为什么需要设立这两种？

这个一问我就知道崩了，直接放弃开始百度，不过面试官见我一会没反应，就问下一个问题了。

> [操作系统为什么要分用户态和内核态][https://blog.csdn.net/liuyueyue0921/article/details/48225533]

### **编程语言**

* 熟悉的编程语言？

C++。

* C++内存中堆和栈的区别和使用场景？

堆是运行时动态分配的内存，栈是调用函数时保存一些临时数据比如返回地址、局部变量和函数参数的。

### **其他**

* 对以后工作的方向有什么想法？

没有特别倾向，由于没有自学过Java，不过如果需要也很有兴趣。